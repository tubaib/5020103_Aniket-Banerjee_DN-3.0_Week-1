1. Create a New Java Project
Open your preferred Java IDE (such as IntelliJ IDEA, Eclipse, etc.).
Create a new Java project named BuilderPatternExample.

2.Define a Product Class
public class Computer {
    
    private String CPU;
    private String RAM;
    private String storage;
    private String GPU;
    private String motherboard;

    
    private Computer(Builder builder) {
        this.CPU = builder.CPU;
        this.RAM = builder.RAM;
        this.storage = builder.storage;
        this.GPU = builder.GPU;
        this.motherboard = builder.motherboard;
    }

    
    public String getCPU() {
        return CPU;
    }

    public String getRAM() {
        return RAM;
    }

    public String getStorage() {
        return storage;
    }

    public String getGPU() {
        return GPU;
    }

    public String getMotherboard() {
        return motherboard;
    }

   
    public String toString() {
        return "Computer [CPU=" + CPU + ", RAM=" + RAM + ", Storage=" + storage + ", GPU=" + GPU + ", Motherboard=" + motherboard + "]";
    }

   
    public static class Builder {
        private String CPU;
        private String RAM;
        private String storage;
        private String GPU;
        private String motherboard;

        
        public Builder setCPU(String CPU) {
            this.CPU = CPU;
            return this;
        }

        public Builder setRAM(String RAM) {
            this.RAM = RAM;
            return this;
        }

        public Builder setStorage(String storage) {
            this.storage = storage;
            return this;
        }

        public Builder setGPU(String GPU) {
            this.GPU = GPU;
            return this;
        }

        public Builder setMotherboard(String motherboard) {
            this.motherboard = motherboard;
            return this;
        }

        
        public Computer build() {
            return new Computer(this);
        }
    }
}

3.Implement the Builder Class
The Builder class is a static nested class inside Computer. It has methods to set each attribute and a build() method that returns an instance of Computer.

4.Implement the Builder Pattern
The Computer class has a private constructor that takes the Builder as a parameter. This ensures that Computer objects can only be created through the Builder.

5.Test the Builder Implementation
public class BuilderPatternTest {
    public static void main(String[] args) {
        
        Computer gamingComputer = new Computer.Builder()
                .setCPU("Intel i9")
                .setRAM("32GB")
                .setStorage("1TB SSD")
                .setGPU("NVIDIA RTX 3080")
                .setMotherboard("ASUS ROG")
                .build();

        System.out.println(gamingComputer);

        
        Computer officeComputer = new Computer.Builder()
                .setCPU("Intel i5")
                .setRAM("16GB")
                .setStorage("512GB SSD")
                .setGPU("Integrated")
                .setMotherboard("ASUS Prime")
                .build();

        System.out.println(officeComputer);
    }
}

